// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`test filters > should create root filter 1`] = `
OptionType {
  Symbol(T): true,
  Symbol(Val): StringEqual {
    "fieldId": "name",
    "value": StringFieldValue {
      "props": {
        "value": "hello",
      },
    },
  },
}
`;

exports[`test filters > should create root filter 2`] = `
OptionType {
  Symbol(T): true,
  Symbol(Val): StringContain {
    "fieldId": "name",
    "value": StringFieldValue {
      "props": {
        "value": "hello",
      },
    },
  },
}
`;

exports[`test filters > should create root filter 3`] = `
OptionType {
  Symbol(T): true,
  Symbol(Val): StringStartsWith {
    "fieldId": "name",
    "value": StringFieldValue {
      "props": {
        "value": "starts with",
      },
    },
  },
}
`;

exports[`test filters > should create root filter 4`] = `
OptionType {
  Symbol(T): true,
  Symbol(Val): StringEndsWith {
    "fieldId": "name",
    "value": StringFieldValue {
      "props": {
        "value": "ends with",
      },
    },
  },
}
`;

exports[`test filters > should create root filter 5`] = `
OptionType {
  Symbol(T): true,
  Symbol(Val): m {
    "spec": NumberEqual {
      "fieldId": "name",
      "value": NumberFieldValue {
        "props": {
          "value": 1,
        },
      },
    },
  },
}
`;

exports[`test filters > should create root filter 6`] = `
OptionType {
  Symbol(T): true,
  Symbol(Val): m {
    "spec": NumberEqual {
      "fieldId": "name.nested",
      "value": NumberFieldValue {
        "props": {
          "value": 1,
        },
      },
    },
  },
}
`;

exports[`test filters > should create root filter 7`] = `
OptionType {
  Symbol(T): true,
  Symbol(Val): StringEqual {
    "fieldId": "name",
    "value": StringFieldValue {
      "props": {
        "value": "hello",
      },
    },
  },
}
`;

exports[`test filters > should create root filter 8`] = `
OptionType {
  Symbol(T): true,
  Symbol(Val): StringEqual {
    "fieldId": "name",
    "value": StringFieldValue {
      "props": {
        "value": "hello",
      },
    },
  },
}
`;

exports[`test filters > should create root filter 9`] = `
OptionType {
  Symbol(T): true,
  Symbol(Val): NumberGreaterThan {
    "fieldId": "gt",
    "value": NumberFieldValue {
      "props": {
        "value": 1,
      },
    },
  },
}
`;

exports[`test filters > should create root filter 10`] = `
OptionType {
  Symbol(T): true,
  Symbol(Val): NumberGreaterThanOrEqual {
    "fieldId": "gte",
    "value": NumberFieldValue {
      "props": {
        "value": 1,
      },
    },
  },
}
`;

exports[`test filters > should create root filter 11`] = `
OptionType {
  Symbol(T): true,
  Symbol(Val): NumberLessThan {
    "fieldId": "lt",
    "value": NumberFieldValue {
      "props": {
        "value": 1,
      },
    },
  },
}
`;

exports[`test filters > should create root filter 12`] = `
OptionType {
  Symbol(T): true,
  Symbol(Val): NumberLessThanOrEqual {
    "fieldId": "lte",
    "value": NumberFieldValue {
      "props": {
        "value": 1,
      },
    },
  },
}
`;

exports[`test filters > should create root filter 13`] = `
OptionType {
  Symbol(T): true,
  Symbol(Val): DateIsToday {
    "fieldId": "is_today",
    "value": DateFieldValue {
      "props": {
        "value": null,
      },
    },
  },
}
`;

exports[`test filters > should create root filter 14`] = `
OptionType {
  Symbol(T): true,
  Symbol(Val): BoolIsTrue {
    "fieldId": "field",
    "value": BoolFieldValue {
      "props": {
        "value": true,
      },
    },
  },
}
`;

exports[`test filters > should create root filter 15`] = `
OptionType {
  Symbol(T): true,
  Symbol(Val): BoolIsFalse {
    "fieldId": "field",
    "value": BoolFieldValue {
      "props": {
        "value": false,
      },
    },
  },
}
`;

exports[`test filters > should create root filter 16`] = `
OptionType {
  Symbol(T): true,
  Symbol(Val): CollaboratorEqual {
    "fieldId": "field",
    "value": CollaboratorFieldValue {
      "props": [
        "usr1",
      ],
    },
  },
}
`;

exports[`test filters > should create root filter 17`] = `
OptionType {
  Symbol(T): true,
  Symbol(Val): DateIsTomorrow {
    "fieldId": "is_tomorrow",
    "value": DateFieldValue {
      "props": {
        "value": null,
      },
    },
  },
}
`;

exports[`test filters > should create root filter 18`] = `
OptionType {
  Symbol(T): true,
  Symbol(Val): DateIsTomorrow {
    "fieldId": "is_tomorrow",
    "value": DateFieldValue {
      "props": {
        "value": null,
      },
    },
  },
}
`;

exports[`test filters > should create root filter 19`] = `
OptionType {
  Symbol(T): true,
  Symbol(Val): DateIsTomorrow {
    "fieldId": "is_tomorrow",
    "value": DateFieldValue {
      "props": {
        "value": null,
      },
    },
  },
}
`;

exports[`test filters > should create root filter 20`] = `
OptionType {
  Symbol(T): true,
  Symbol(Val): DateIsYesterday {
    "fieldId": "is_yesterday",
    "value": DateFieldValue {
      "props": {
        "value": null,
      },
    },
  },
}
`;

exports[`test filters > should create root filter 21`] = `
OptionType {
  Symbol(T): true,
  Symbol(Val): DateIsYesterday {
    "fieldId": "is_yesterday",
    "value": DateFieldValue {
      "props": {
        "value": null,
      },
    },
  },
}
`;

exports[`test filters > should create root filter 22`] = `
OptionType {
  Symbol(T): true,
  Symbol(Val): DateIsYesterday {
    "fieldId": "is_yesterday",
    "value": DateFieldValue {
      "props": {
        "value": null,
      },
    },
  },
}
`;

exports[`test filters > should create root filter 23`] = `
OptionType {
  Symbol(T): true,
  Symbol(Val): DateBetween {
    "date1": 2020-01-31T00:00:00.000Z,
    "date2": 2020-02-01T00:00:00.000Z,
    "fieldId": "between",
  },
}
`;

exports[`test filters > should create root filter 24`] = `
OptionType {
  Symbol(T): true,
  Symbol(Val): DateBetween {
    "date1": 2020-01-31T00:00:00.000Z,
    "date2": 2020-02-01T00:00:00.000Z,
    "fieldId": "between",
  },
}
`;

exports[`test filters > should create root filter 25`] = `
OptionType {
  Symbol(T): true,
  Symbol(Val): DateBetween {
    "date1": 2020-01-31T00:00:00.000Z,
    "date2": 2020-02-01T00:00:00.000Z,
    "fieldId": "between",
  },
}
`;
